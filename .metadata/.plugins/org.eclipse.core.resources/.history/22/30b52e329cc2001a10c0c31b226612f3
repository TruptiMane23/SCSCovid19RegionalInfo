package com.example.scs.util;

import java.io.File;
import java.io.FileInputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;

import javax.transaction.Transactional;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.example.scs.dao.CovidDashboardDao;
import com.example.scs.model.CovidDashboard;

@Component
public class CronSchedular {

	private static final Logger logger = LoggerFactory.getLogger(CronSchedular.class);

	@Autowired
	CovidDashboardDao covidDashboardDao;

	@Scheduled(cron = "0 56 12 * * *")
	public void cronJobSch() {
		System.out.println("in ..");
		updateDailyCovidDetails();
	}

	
	public void updateDailyCovidDetails() {
		logger.info("--------------Inside updateDailyCovidDetails-----------------");

		try {
			File file = new File("E:/TruptiFrankfurtStudyMaterial/SCS/Projects/COVID19/Documents/ExcelReport/CovidDailyData.xlsx");
			FileInputStream fis = new FileInputStream(file);

			XSSFWorkbook wb = new XSSFWorkbook(fis);

			XSSFSheet sheet = wb.getSheetAt(0);
			Iterator<Row> itr = sheet.iterator();
			while (itr.hasNext()) {
				Row row = itr.next();
				System.out.println("row num - " + row.getRowNum());
				if (row.getRowNum() == 0) {
					continue;
				}

				if(!(row.getCell(0) == null)) {
					
				
				int cityId = (int) row.getCell(0).getNumericCellValue();
				System.out.println("-----areaId---------" + cityId);

				int newDailyRecovered = (int) row.getCell(5).getNumericCellValue();
				System.out.println("-----newDailyRecovered---------" + newDailyRecovered);

				int newDailyDeaths = (int) row.getCell(6).getNumericCellValue();
				System.out.println("-----newDailyDeaths---------" + newDailyDeaths);

				int newDailyActive = (int) row.getCell(7).getNumericCellValue();
				System.out.println("-----newDailyActive---------" + newDailyActive);

				int totalCases = (int) row.getCell(8).getNumericCellValue();
				System.out.println("-----totalCases---------" + totalCases);

				int recoveredCases = (int) row.getCell(9).getNumericCellValue();
				System.out.println("-----recoveredCases---------" + recoveredCases);

				int deathCases = (int) row.getCell(10).getNumericCellValue();
				System.out.println("-----deathCases---------" + deathCases);

				int activeCases = (int) row.getCell(11).getNumericCellValue();
				System.out.println("-----activeCases---------" + activeCases);

				Date mdDt = row.getCell(12).getDateCellValue();
				System.out.println("Modofed date - " + mdDt);

				SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
				df.format(mdDt);
				System.out.println("val - " + df.format(mdDt));

				String zone = row.getCell(13).getStringCellValue();
				System.out.println("zone --" + zone);
				
				int covidDashboard = covidDashboardDao.updateDailyCases(cityId, newDailyRecovered, newDailyDeaths, newDailyActive, totalCases, recoveredCases,
						deathCases, activeCases, df.format(mdDt), zone);

				System.out.println("covidDashboard././" + covidDashboard);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Message .. " + e.getMessage());
		}
	}
}